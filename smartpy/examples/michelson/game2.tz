parameter (or (or (pair %attack (nat %attacker_id) (nat %victim_id)) (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (pair %change_weapon (nat %token_id) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))))) (or (pair %mint (address %address) (nat %token_id)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))));
storage   (pair (pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%attack
            # == attack ==
            # sp.verify(self.data.tokens.contains(params.attacker_id), 'FA2_TOKEN_UNDEFINED') # @storage : @parameter%attack
            DUP;        # @storage : @storage : @parameter%attack
            DUG 2;      # @storage : @parameter%attack : @storage
            GET 6;      # big_map nat unit : @parameter%attack : @storage
            SWAP;       # @parameter%attack : big_map nat unit : @storage
            DUP;        # @parameter%attack : @parameter%attack : big_map nat unit : @storage
            DUG 2;      # @parameter%attack : big_map nat unit : @parameter%attack : @storage
            CAR;        # nat : big_map nat unit : @parameter%attack : @storage
            MEM;        # bool : @parameter%attack : @storage
            IF
              {}
              {
                PUSH string "FA2_TOKEN_UNDEFINED"; # string : @parameter%attack : @storage
                FAILWITH;   # FAILED
              }; # @parameter%attack : @storage
            SWAP;       # @storage : @parameter%attack
            # sp.verify(self.data.tokens.contains(params.victim_id), 'FA2_TOKEN_UNDEFINED') # @storage : @parameter%attack
            DUP;        # @storage : @storage : @parameter%attack
            DUG 2;      # @storage : @parameter%attack : @storage
            GET 6;      # big_map nat unit : @parameter%attack : @storage
            SWAP;       # @parameter%attack : big_map nat unit : @storage
            DUP;        # @parameter%attack : @parameter%attack : big_map nat unit : @storage
            DUG 2;      # @parameter%attack : big_map nat unit : @parameter%attack : @storage
            CDR;        # nat : big_map nat unit : @parameter%attack : @storage
            MEM;        # bool : @parameter%attack : @storage
            IF
              {}
              {
                PUSH string "FA2_TOKEN_UNDEFINED"; # string : @parameter%attack : @storage
                FAILWITH;   # FAILED
              }; # @parameter%attack : @storage
            # sp.verify(self.data.ledger.get((sp.sender, params.attacker_id), default_value = 0) == 1, 'NOT_AUTHORISED') # @parameter%attack : @storage
            PUSH nat 1; # nat : @parameter%attack : @storage
            DUP 3;      # @storage : nat : @parameter%attack : @storage
            CAR;        # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : nat : @parameter%attack : @storage
            GET 3;      # big_map (pair address nat) nat : nat : @parameter%attack : @storage
            DUP 3;      # @parameter%attack : big_map (pair address nat) nat : nat : @parameter%attack : @storage
            CAR;        # nat : big_map (pair address nat) nat : nat : @parameter%attack : @storage
            SENDER;     # @sender : nat : big_map (pair address nat) nat : nat : @parameter%attack : @storage
            PAIR;       # pair @sender nat : big_map (pair address nat) nat : nat : @parameter%attack : @storage
            GET;        # option nat : nat : @parameter%attack : @storage
            IF_NONE
              {
                PUSH nat 0; # nat : nat : @parameter%attack : @storage
              }
              {}; # nat : nat : @parameter%attack : @storage
            COMPARE;    # int : @parameter%attack : @storage
            EQ;         # bool : @parameter%attack : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%attack : @storage
                FAILWITH;   # FAILED
              }; # @parameter%attack : @storage
            # damage = sp.local("damage", 0) # @parameter%attack : @storage
            PUSH nat 0; # nat : @parameter%attack : @storage
            # with self.data.player_states[params.attacker_id].weapon.match_cases(...): # nat : @parameter%attack : @storage
            DUP 3;      # @storage : nat : @parameter%attack : @storage
            GET 5;      # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @parameter%attack : @storage
            DUP 3;      # @parameter%attack : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @parameter%attack : @storage
            CAR;        # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @parameter%attack : @storage
            GET;        # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @parameter%attack : @storage
            IF_NONE
              {
                PUSH int 113; # int : nat : @parameter%attack : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @parameter%attack : @storage
            CDR;        # or (unit %pistol) (or (unit %rifle) (unit %sword)) : nat : @parameter%attack : @storage
            IF_LEFT
              {
                DROP 2;     # @parameter%attack : @storage
                # damage.value = 2 # @parameter%attack : @storage
                PUSH nat 2; # nat : @parameter%attack : @storage
              }
              {
                SWAP;       # nat : or (unit %rifle) (unit %sword) : @parameter%attack : @storage
                DROP;       # or (unit %rifle) (unit %sword) : @parameter%attack : @storage
                IF_LEFT
                  {
                    DROP;       # @parameter%attack : @storage
                    # damage.value = 3 # @parameter%attack : @storage
                    PUSH nat 3; # nat : @parameter%attack : @storage
                  }
                  {
                    DROP;       # @parameter%attack : @storage
                    # damage.value = 1 # @parameter%attack : @storage
                    PUSH nat 1; # nat : @parameter%attack : @storage
                  }; # nat : @parameter%attack : @storage
              }; # nat : @parameter%attack : @storage
            # self.data.player_states[params.victim_id].lives = sp.as_nat(self.data.player_states[params.victim_id].lives - damage.value, message = 'VICTIM_ALREADY_DEAD') # nat : @parameter%attack : @storage
            DUP 3;      # @storage : nat : @parameter%attack : @storage
            DUP;        # @storage : @storage : nat : @parameter%attack : @storage
            GET 5;      # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            DUP;        # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            DUP 5;      # @parameter%attack : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            CDR;        # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            DUP;        # nat : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            DUG 2;      # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            GET;        # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            IF_NONE
              {
                PUSH int 123; # int : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : nat : @parameter%attack : @storage
            DIG 4;      # nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%attack : @storage
            DIG 6;      # @storage : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%attack
            GET 5;      # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%attack
            DIG 6;      # @parameter%attack : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            CDR;        # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            GET;        # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            IF_NONE
              {
                PUSH int 121; # int : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            CAR;        # nat : nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            SUB;        # int : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            ISNAT;      # option nat : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            IF_NONE
              {
                PUSH string "VICTIM_ALREADY_DEAD"; # string : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            UPDATE 1;   # @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            SOME;       # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            SWAP;       # nat : option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            UPDATE;     # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
            UPDATE 5;   # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                # == balance_of ==
                # response = sp.local("response", sp.list([])) # @parameter%balance_of : @storage
                NIL (pair (pair address nat) nat); # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                SWAP;       # @parameter%balance_of : list (pair (pair address nat) nat) : @storage
                # for request in params.requests: ... # @parameter%balance_of : list (pair (pair address nat) nat) : @storage
                DUP;        # @parameter%balance_of : @parameter%balance_of : list (pair (pair address nat) nat) : @storage
                DUG 2;      # @parameter%balance_of : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                CAR;        # list (pair (address %owner) (nat %token_id)) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                ITER
                  {
                    # sp.verify(self.data.tokens.contains(request.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    DUP 4;      # @storage : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    GET 6;      # big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    SWAP;       # pair (address %owner) (nat %token_id) : big_map nat unit : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : big_map nat unit : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    DUG 2;      # pair (address %owner) (nat %token_id) : big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    CDR;        # nat : big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    MEM;        # bool : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    IF
                      {}
                      {
                        PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                        FAILWITH;   # FAILED
                      }; # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    SWAP;       # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    # response.value.push(sp.record(request = request, balance = 0)) # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    PUSH nat 0; # nat : list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    DIG 2;      # pair (address %owner) (nat %token_id) : nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    PAIR;       # pair (pair (address %owner) (nat %token_id)) nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    CONS;       # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                  }; # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                # sp.transfer(response.value, sp.tez(0), params.callback) # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                NIL operation; # list operation : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DIG 2;      # @parameter%balance_of : list operation : list (pair (pair address nat) nat) : @storage
                CDR;        # contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
                PUSH mutez 0; # mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
                DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%change_weapon
                # == change_weapon ==
                # sp.verify(self.data.tokens.contains(params.token_id), 'FA2_TOKEN_UNDEFINED') # @storage : @parameter%change_weapon
                DUP;        # @storage : @storage : @parameter%change_weapon
                DUG 2;      # @storage : @parameter%change_weapon : @storage
                GET 6;      # big_map nat unit : @parameter%change_weapon : @storage
                SWAP;       # @parameter%change_weapon : big_map nat unit : @storage
                DUP;        # @parameter%change_weapon : @parameter%change_weapon : big_map nat unit : @storage
                DUG 2;      # @parameter%change_weapon : big_map nat unit : @parameter%change_weapon : @storage
                CAR;        # nat : big_map nat unit : @parameter%change_weapon : @storage
                MEM;        # bool : @parameter%change_weapon : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : @parameter%change_weapon : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%change_weapon : @storage
                # sp.verify(self.data.ledger.get((sp.sender, params.token_id), default_value = 0) == 1, 'NOT_AUTHORISED') # @parameter%change_weapon : @storage
                PUSH nat 1; # nat : @parameter%change_weapon : @storage
                DUP 3;      # @storage : nat : @parameter%change_weapon : @storage
                CAR;        # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : nat : @parameter%change_weapon : @storage
                GET 3;      # big_map (pair address nat) nat : nat : @parameter%change_weapon : @storage
                DUP 3;      # @parameter%change_weapon : big_map (pair address nat) nat : nat : @parameter%change_weapon : @storage
                CAR;        # nat : big_map (pair address nat) nat : nat : @parameter%change_weapon : @storage
                SENDER;     # @sender : nat : big_map (pair address nat) nat : nat : @parameter%change_weapon : @storage
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : nat : @parameter%change_weapon : @storage
                GET;        # option nat : nat : @parameter%change_weapon : @storage
                IF_NONE
                  {
                    PUSH nat 0; # nat : nat : @parameter%change_weapon : @storage
                  }
                  {}; # nat : nat : @parameter%change_weapon : @storage
                COMPARE;    # int : @parameter%change_weapon : @storage
                EQ;         # bool : @parameter%change_weapon : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%change_weapon : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%change_weapon : @storage
                SWAP;       # @storage : @parameter%change_weapon
                # self.data.player_states[params.token_id].weapon = params.weapon # @storage : @parameter%change_weapon
                DUP;        # @storage : @storage : @parameter%change_weapon
                GET 5;      # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                DUP;        # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                DUP 4;      # @parameter%change_weapon : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                CAR;        # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                DUP;        # nat : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                DUG 2;      # nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                GET;        # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                IF_NONE
                  {
                    PUSH int 98; # int : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage : @parameter%change_weapon
                DIG 4;      # @parameter%change_weapon : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                CDR;        # or (unit %pistol) (or (unit %rifle) (unit %sword)) : @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                UPDATE 2;   # @some : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                SOME;       # option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : nat : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                SWAP;       # nat : option (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                UPDATE;     # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : @storage
                UPDATE 5;   # @storage
                NIL operation; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : @storage
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%mint
            # == mint ==
            # sp.verify(sp.sender == self.data.admin, 'NOT_AUTHORISED') # @storage : @parameter%mint
            DUP;        # @storage : @storage : @parameter%mint
            DUG 2;      # @storage : @parameter%mint : @storage
            CAR;        # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : @parameter%mint : @storage
            CAR;        # address : @parameter%mint : @storage
            SENDER;     # @sender : address : @parameter%mint : @storage
            COMPARE;    # int : @parameter%mint : @storage
            EQ;         # bool : @parameter%mint : @storage
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%mint : @storage
                FAILWITH;   # FAILED
              }; # @parameter%mint : @storage
            SWAP;       # @storage : @parameter%mint
            # sp.verify(~ (self.data.tokens.contains(params.token_id)), 'TOKEN_ID_ALREADY_EXISTS') # @storage : @parameter%mint
            DUP;        # @storage : @storage : @parameter%mint
            DUG 2;      # @storage : @parameter%mint : @storage
            GET 6;      # big_map nat unit : @parameter%mint : @storage
            SWAP;       # @parameter%mint : big_map nat unit : @storage
            DUP;        # @parameter%mint : @parameter%mint : big_map nat unit : @storage
            DUG 2;      # @parameter%mint : big_map nat unit : @parameter%mint : @storage
            CDR;        # nat : big_map nat unit : @parameter%mint : @storage
            MEM;        # bool : @parameter%mint : @storage
            IF
              {
                PUSH string "TOKEN_ID_ALREADY_EXISTS"; # string : @parameter%mint : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%mint : @storage
            SWAP;       # @storage : @parameter%mint
            # self.data.ledger[(params.address, params.token_id)] = 1 # @storage : @parameter%mint
            UNPAIR;     # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            UNPAIR;     # address : pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            SWAP;       # pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            PUSH (option nat) (Some 1); # option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            DIG 5;      # @parameter%mint : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))
            DUP;        # @parameter%mint : @parameter%mint : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))
            CDR;        # nat : @parameter%mint : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))
            SWAP;       # @parameter%mint : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))
            DUP;        # @parameter%mint : @parameter%mint : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))
            DUG 7;      # @parameter%mint : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            UPDATE;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            SWAP;       # address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            PAIR;       # pair address (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : @parameter%mint
            PAIR;       # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            # self.data.tokens[params.token_id] = sp.unit # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            DUP;        # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            GET 6;      # big_map nat unit : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            PUSH (option unit) (Some Unit); # option unit : big_map nat unit : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            DUP 4;      # @parameter%mint : option unit : big_map nat unit : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            CDR;        # nat : option unit : big_map nat unit : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            UPDATE;     # big_map nat unit : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            UPDATE 6;   # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            # self.data.player_states[params.token_id] = sp.record(lives = 3, weapon = variant('sword', sp.unit)) # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            DUP;        # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            GET 5;      # big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            PUSH (option (pair nat (or unit (or unit unit)))) (Some (Pair 3 (Right (Right Unit)))); # option (pair nat (or unit (or unit unit))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : @parameter%mint
            DIG 3;      # @parameter%mint : option (pair nat (or unit (or unit unit))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
            CDR;        # nat : option (pair nat (or unit (or unit unit))) : big_map nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword)))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
            UPDATE;     # big_map nat (pair nat (or unit (or unit unit))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
            UPDATE 5;   # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
          }
          {
            IF_LEFT
              {
                # == transfer ==
                # for transfer in params: ... # @parameter%transfer : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                ITER
                  {
                    # for tx in transfer.txs: ... # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    ITER
                      {
                        SWAP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                        # sp.verify((sp.sender == transfer.from_) | (self.data.operators.contains(sp.record(owner = transfer.from_, operator = sp.sender, token_id = tx.token_id))), 'FA2_NOT_OPERATOR') # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                        DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                        DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        CAR;        # address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        SENDER;     # @sender : address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                          }
                          {
                            DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            GET 3;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            DUG 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            GET 3;      # nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            SENDER;     # @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            CAR;        # address : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            PAIR 3;     # pair address (pair @sender nat) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                          }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OPERATOR"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        # if tx.amount > 0: # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        PUSH nat 0; # nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        LT;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {
                            # self.data.ledger[(transfer.from_, tx.token_id)] = sp.as_nat(self.data.ledger[(transfer.from_, tx.token_id)] - tx.amount, message = 'FA2_INSUFFICIENT_BALANCE') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # address : pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            SWAP;       # pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 4;      # nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DIG 8;      # @storage : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # pair (address %admin) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes)) : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 7;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 9;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET;        # option nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            IF_NONE
                              {
                                PUSH int 125; # int : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SUB;        # int : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            ISNAT;      # option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            IF_NONE
                              {
                                PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 8;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            UPDATE;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            # self.data.ledger[(tx.to_, tx.token_id)] = self.data.ledger.get((tx.to_, tx.token_id), default_value = 0) + tx.amount # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP;        # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUG 4;      # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            UNPAIR;     # pair address (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            UNPAIR;     # address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            GET 4;      # nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                            DIG 8;      # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # pair address (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DIG 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUG 8;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET;        # option nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            IF_NONE
                              {
                                PUSH nat 0; # nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                              }
                              {}; # nat : nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            ADD;        # nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DIG 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            UPDATE;     # big_map (pair address nat) nat : big_map string bytes : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : address : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                          }
                          {
                            DROP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                          }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
                      }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    DROP;       # @parameter%transfer : @storage
                  }; # @parameter%transfer : @storage
                DROP;       # @storage
              }
              {
                # == update_operators ==
                # for update in params: ... # @parameter%update_operators : @storage
                DUP;        # @parameter%update_operators : @parameter%update_operators : @storage
                ITER
                  {
                    # with update.match_cases(...): # or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))) : @parameter%update_operators : @storage
                    IF_LEFT
                      {
                        # sp.verify(add_operator.owner == sp.sender, 'FA2_NOT_OWNER') # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OWNER"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        # self.data.operators[add_operator] = sp.unit # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DUP;        # @storage : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        GET 3;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        PUSH (option unit) (Some Unit); # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DIG 3;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE 3;   # @storage : @parameter%update_operators
                        SWAP;       # @parameter%update_operators : @storage
                      }
                      {
                        # sp.verify(remove_operator.owner == sp.sender, 'FA2_NOT_OWNER') # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OWNER"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        # del self.data.operators[remove_operator] # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DUP;        # @storage : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        GET 3;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        NONE unit;  # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DIG 3;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE 3;   # @storage : @parameter%update_operators
                        SWAP;       # @parameter%update_operators : @storage
                      }; # list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                  }; # @parameter%update_operators : @storage
                DROP;       # @storage
              }; # @storage
          }; # pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
        NIL operation; # list operation : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
      }; # list operation : pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit)))
    PAIR;       # pair (list operation) (pair (pair address (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (pair (big_map %player_states nat (pair (nat %lives) (or %weapon (unit %pistol) (or (unit %rifle) (unit %sword))))) (big_map %tokens nat unit))))
  };