parameter (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (unit %mint)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (or (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))) (nat %withdraw))));
storage   (pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count))) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            # == balance_of ==
            # response = sp.local("response", sp.list([])) # @parameter%balance_of : @storage
            NIL (pair (pair address nat) nat); # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            SWAP;       # @parameter%balance_of : list (pair (pair address nat) nat) : @storage
            # for request in params.requests: ... # @parameter%balance_of : list (pair (pair address nat) nat) : @storage
            DUP;        # @parameter%balance_of : @parameter%balance_of : list (pair (pair address nat) nat) : @storage
            DUG 2;      # @parameter%balance_of : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            CAR;        # list (pair (address %owner) (nat %token_id)) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            ITER
              {
                # sp.verify(self.data.tokens.contains(request.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DUP 4;      # @storage : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                GET 6;      # big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                SWAP;       # pair (address %owner) (nat %token_id) : big_map nat unit : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : big_map nat unit : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DUG 2;      # pair (address %owner) (nat %token_id) : big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                CDR;        # nat : big_map nat unit : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                MEM;        # bool : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    FAILWITH;   # FAILED
                  }; # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                SWAP;       # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                # response.value.push(sp.record(request = request, balance = 0)) # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                PUSH nat 0; # nat : list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                DIG 2;      # pair (address %owner) (nat %token_id) : nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                PAIR;       # pair (pair (address %owner) (nat %token_id)) nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                CONS;       # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
              }; # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            # sp.transfer(response.value, sp.tez(0), params.callback) # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            NIL operation; # list operation : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
            DIG 2;      # @parameter%balance_of : list operation : list (pair (pair address nat) nat) : @storage
            CDR;        # contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
            PUSH mutez 0; # mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
            DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
          }
          {
            DROP;       # @storage
            # == mint ==
            # sp.verify(sp.amount > sp.tez(0), 'ZERO_AMOUNT_BEING_LOCKED') # @storage
            PUSH mutez 0; # mutez : @storage
            AMOUNT;     # @amount : mutez : @storage
            COMPARE;    # int : @storage
            GT;         # bool : @storage
            IF
              {}
              {
                PUSH string "ZERO_AMOUNT_BEING_LOCKED"; # string : @storage
                FAILWITH;   # FAILED
              }; # @storage
            # self.data.lock_count += 1 # @storage
            UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            UNPAIR;     # pair (address %admin) (address %harbinger_address) : pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SWAP;       # pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            UNPAIR;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SWAP;       # nat : big_map (pair address nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PUSH nat 1; # nat : nat : big_map (pair address nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            ADD;        # nat : big_map (pair address nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SWAP;       # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SWAP;       # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            # compute_locker_75 = sp.local("compute_locker_75", self.data.lock_count) # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            DUP;        # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            CAR;        # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            GET 4;      # nat : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            SWAP;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            # self.data.locks[compute_locker_75.value] = sp.amount # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            SWAP;       # pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            UNPAIR;     # pair (big_map %locks nat mutez) (big_map %metadata string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            UNPAIR;     # big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            AMOUNT;     # @amount : big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            SOME;       # option mutez : big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            DUP 6;      # nat : option mutez : big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            UPDATE;     # big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            PAIR;       # pair (big_map nat mutez) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            PAIR;       # pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat
            SWAP;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            # self.data.tokens[compute_locker_75.value] = sp.unit # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            DUP;        # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            GET 6;      # big_map nat unit : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            PUSH (option unit) (Some Unit); # option unit : big_map nat unit : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            DUP 4;      # nat : option unit : big_map nat unit : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            UPDATE;     # big_map nat unit : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            UPDATE 6;   # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            # self.data.ledger[(sp.sender, compute_locker_75.value)] = 1 # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat
            UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            UNPAIR;     # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            SWAP;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            UNPAIR;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            PUSH (option nat) (Some 1); # option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : nat
            DIG 5;      # nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SENDER;     # @sender : nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair @sender nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            UPDATE;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            SWAP;       # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))
            PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
            NIL operation; # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
          }; # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
      }
      {
        IF_LEFT
          {
            # == transfer ==
            # for transfer in params: ... # @parameter%transfer : @storage
            DUP;        # @parameter%transfer : @parameter%transfer : @storage
            ITER
              {
                # for tx in transfer.txs: ... # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                ITER
                  {
                    SWAP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                    # sp.verify((sp.sender == transfer.from_) | (self.data.operators.contains(sp.record(owner = transfer.from_, operator = sp.sender, token_id = tx.token_id))), 'FA2_NOT_OPERATOR') # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                    DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : @parameter%transfer : @storage
                    DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    CAR;        # address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    SENDER;     # @sender : address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    IF
                      {
                        PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                      }
                      {
                        DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        GET 5;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DUG 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        GET 3;      # nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        SENDER;     # @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        CAR;        # address : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        PAIR 3;     # pair address (pair @sender nat) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                      }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    IF
                      {}
                      {
                        PUSH string "FA2_NOT_OPERATOR"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        FAILWITH;   # FAILED
                      }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    # if tx.amount > 0: # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    PUSH nat 0; # nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    LT;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                    IF
                      {
                        # self.data.ledger[(transfer.from_, tx.token_id)] = sp.as_nat(self.data.ledger[(transfer.from_, tx.token_id)] - tx.amount, message = 'FA2_INSUFFICIENT_BALANCE') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        UNPAIR;     # pair (address %admin) (address %harbinger_address) : pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        SWAP;       # pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        UNPAIR;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        GET 4;      # nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DIG 8;      # @storage : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP 7;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP 9;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # address : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair address nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET;        # option nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        IF_NONE
                          {
                            PUSH int 125; # int : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SUB;        # int : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        ISNAT;      # option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        IF_NONE
                          {
                            PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SOME;       # option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP 8;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        UPDATE;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SWAP;       # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        # self.data.ledger[(tx.to_, tx.token_id)] = self.data.ledger.get((tx.to_, tx.token_id), default_value = 0) + tx.amount # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP;        # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUG 4;      # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        UNPAIR;     # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        SWAP;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        UNPAIR;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        GET 4;      # nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                        DIG 8;      # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DIG 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUG 8;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # address : nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair address nat : big_map (pair address nat) nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET;        # option nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        IF_NONE
                          {
                            PUSH nat 0; # nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                          }
                          {}; # nat : nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        ADD;        # nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SOME;       # option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DIG 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        UPDATE;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        SWAP;       # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                        DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                      }
                      {
                        DROP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                      }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
                  }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                DROP;       # @parameter%transfer : @storage
              }; # @parameter%transfer : @storage
            DROP;       # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                # == update_operators ==
                # for update in params: ... # @parameter%update_operators : @storage
                DUP;        # @parameter%update_operators : @parameter%update_operators : @storage
                ITER
                  {
                    # with update.match_cases(...): # or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))) : @parameter%update_operators : @storage
                    IF_LEFT
                      {
                        # sp.verify(add_operator.owner == sp.sender, 'FA2_NOT_OWNER') # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OWNER"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        # self.data.operators[add_operator] = sp.unit # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DUP;        # @storage : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        GET 5;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        PUSH (option unit) (Some Unit); # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DIG 3;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE 5;   # @storage : @parameter%update_operators
                        SWAP;       # @parameter%update_operators : @storage
                      }
                      {
                        # sp.verify(remove_operator.owner == sp.sender, 'FA2_NOT_OWNER') # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OWNER"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        # del self.data.operators[remove_operator] # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DUP;        # @storage : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        GET 5;      # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        NONE unit;  # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators
                        DIG 3;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : @storage : @parameter%update_operators
                        UPDATE 5;   # @storage : @parameter%update_operators
                        SWAP;       # @parameter%update_operators : @storage
                      }; # list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                  }; # @parameter%update_operators : @storage
                DROP;       # @storage
                NIL operation; # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%withdraw
                # == withdraw ==
                # compute_locker_89 = sp.local("compute_locker_89", self.data.locks.get(params, default_value = sp.tez(0))) # @storage : @parameter%withdraw
                DUP;        # @storage : @storage : @parameter%withdraw
                DUG 2;      # @storage : @parameter%withdraw : @storage
                GET 3;      # pair (big_map %locks nat mutez) (big_map %metadata string bytes) : @parameter%withdraw : @storage
                CAR;        # big_map nat mutez : @parameter%withdraw : @storage
                SWAP;       # @parameter%withdraw : big_map nat mutez : @storage
                DUP;        # @parameter%withdraw : @parameter%withdraw : big_map nat mutez : @storage
                DUG 2;      # @parameter%withdraw : big_map nat mutez : @parameter%withdraw : @storage
                GET;        # option mutez : @parameter%withdraw : @storage
                IF_NONE
                  {
                    PUSH mutez 0; # mutez : @parameter%withdraw : @storage
                  }
                  {}; # mutez : @parameter%withdraw : @storage
                # sp.verify(compute_locker_89.value > sp.tez(0), 'FA2_TOKEN_UNDEFINED') # mutez : @parameter%withdraw : @storage
                DUP;        # mutez : mutez : @parameter%withdraw : @storage
                PUSH mutez 0; # mutez : mutez : mutez : @parameter%withdraw : @storage
                COMPARE;    # int : mutez : @parameter%withdraw : @storage
                LT;         # bool : mutez : @parameter%withdraw : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : mutez : @parameter%withdraw : @storage
                    FAILWITH;   # FAILED
                  }; # mutez : @parameter%withdraw : @storage
                # sp.verify(self.data.ledger.get((sp.sender, params), default_value = 0) == 1, 'NOT_AUTHORISED') # mutez : @parameter%withdraw : @storage
                PUSH nat 1; # nat : mutez : @parameter%withdraw : @storage
                DUP 4;      # @storage : nat : mutez : @parameter%withdraw : @storage
                CAR;        # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : nat : mutez : @parameter%withdraw : @storage
                GET 3;      # big_map (pair address nat) nat : nat : mutez : @parameter%withdraw : @storage
                DUP 4;      # @parameter%withdraw : big_map (pair address nat) nat : nat : mutez : @parameter%withdraw : @storage
                SENDER;     # @sender : @parameter%withdraw : big_map (pair address nat) nat : nat : mutez : @parameter%withdraw : @storage
                PAIR;       # pair @sender @parameter%withdraw : big_map (pair address nat) nat : nat : mutez : @parameter%withdraw : @storage
                GET;        # option nat : nat : mutez : @parameter%withdraw : @storage
                IF_NONE
                  {
                    PUSH nat 0; # nat : nat : mutez : @parameter%withdraw : @storage
                  }
                  {}; # nat : nat : mutez : @parameter%withdraw : @storage
                COMPARE;    # int : mutez : @parameter%withdraw : @storage
                EQ;         # bool : mutez : @parameter%withdraw : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : mutez : @parameter%withdraw : @storage
                    FAILWITH;   # FAILED
                  }; # mutez : @parameter%withdraw : @storage
                # sp.send(sp.sender, compute_locker_89.value) # mutez : @parameter%withdraw : @storage
                NIL operation; # list operation : mutez : @parameter%withdraw : @storage
                SENDER;     # @sender : list operation : mutez : @parameter%withdraw : @storage
                CONTRACT unit; # option (contract unit) : list operation : mutez : @parameter%withdraw : @storage
                IF_NONE
                  {
                    PUSH int 98; # int : list operation : mutez : @parameter%withdraw : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : mutez : @parameter%withdraw : @storage
                DIG 2;      # mutez : @some : list operation : @parameter%withdraw : @storage
                UNIT;       # unit : mutez : @some : list operation : @parameter%withdraw : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%withdraw : @storage
                CONS;       # list operation : @parameter%withdraw : @storage
                # del self.data.locks[params] # list operation : @parameter%withdraw : @storage
                DIG 2;      # @storage : list operation : @parameter%withdraw
                UNPAIR;     # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                SWAP;       # pair (pair (big_map %locks nat mutez) (big_map %metadata string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                UNPAIR;     # pair (big_map %locks nat mutez) (big_map %metadata string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                UNPAIR;     # big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                NONE mutez; # option mutez : big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                DUP 7;      # @parameter%withdraw : option mutez : big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                UPDATE;     # big_map nat mutez : big_map string bytes : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                PAIR;       # pair (big_map nat mutez) (big_map string bytes) : pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                PAIR;       # pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : list operation : @parameter%withdraw
                SWAP;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                # del self.data.ledger[(sp.sender, params)] # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map %ledger (pair address nat) nat) (nat %lock_count)) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                UNPAIR;     # pair (address %admin) (address %harbinger_address) : pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                SWAP;       # pair (big_map %ledger (pair address nat) nat) (nat %lock_count) : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                UNPAIR;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                NONE nat;   # option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation : @parameter%withdraw
                DIG 6;      # @parameter%withdraw : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                SENDER;     # @sender : @parameter%withdraw : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                PAIR;       # pair @sender @parameter%withdraw : option nat : big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                UPDATE;     # big_map (pair address nat) nat : nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                PAIR;       # pair (big_map (pair address nat) nat) nat : pair (address %admin) (address %harbinger_address) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                SWAP;       # pair (address %admin) (address %harbinger_address) : pair (big_map (pair address nat) nat) nat : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                PAIR;       # pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat) : pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)) : list operation
                PAIR;       # pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
              }; # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
          }; # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
      }; # list operation : pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit)))
    PAIR;       # pair (list operation) (pair (pair (pair (address %admin) (address %harbinger_address)) (pair (big_map (pair address nat) nat) nat)) (pair (pair (big_map nat mutez) (big_map string bytes)) (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (big_map %tokens nat unit))))
  };